for(i in 1:length(d$Munsell)){
color<-d$Munsell[i]
hue<-str_replace(color, "(.)[/](.)", "")
chroma<-as.numeric(str_match(color, "(.)[/](.)"))[2]
value<-as.numeric(str_match(color, "(.)[/](.)"))[3]
output<-munsell.converter(hue, value,chroma)
d$colorx[i]<-as.numeric(output[1])
d$colory[i]<-as.numeric(output[2])
d$colorz[i]<-as.numeric(output[3])
}
jitterfy<-function(x){
return(rnorm(1,x, .1))
}
for(i in 1:length(d$colorx)){d$jitterx[i]<-jitterfy(d$colorx[i])}
for(i in 1:length(d$colory)){d$jittery[i]<-jitterfy(d$colory[i])}
for(i in 1:length(d$colorz)){d$jitterz[i]<-jitterfy(d$colorz[i])}
p <- plot_ly(data=d) %>%
# the scatter plot of the data points
add_trace(x=d$jitterx, y=d$jittery, z=d$jitterz,
color=d$LithicArtifactClass,
type="scatter3d", mode="markers",
colors = "Set1",
hoverinfo = "text",
hovertext=paste(d$Munsell, d$LithicArtifactClass),
jitter = 0.7,
marker = list(opacity = .5, size=4))
p
test<-d[which(d$colorz>0),]
pc <- princomp(~ colorx + colory + colorz,
data = test, na.action = na.exclude, cor = TRUE)
scores<-as.data.frame(pc$scores)
d$Comp.1[which(d$colorz>0)]<-scores$Comp.1
d$Comp.2[which(d$colorz>0)]<-scores$Comp.2
d$Comp.3[which(d$colorz>0)]<-scores$Comp.3
pc$loadings
ggplot(data=d) +
geom_jitter(aes(x=Comp.1, y=Comp.2, fill=d$EvidencePostDepBurning),
width=.1, height=.1,
alpha=.5, shape=21,size=2,
color="black")
ggplot(data=d) +
geom_jitter(aes(x=Comp.1, y=Comp.2, fill=d$EvidencePostDepBurning),
width=.1, height=.1,
alpha=.5, shape=21,size=2,
color="black")
find_hull <- function(x) x[chull(x$colorx, x$colorz), ]
hulls <- ddply(d, "EvidencePostDepBurning", find_hull)
find_hull <- function(x) x[chull(x$colorx, x$colorz), ]
test<-d[which(d$colorz>0),]
hulls <- ddply(test, "EvidencePostDepBurning", find_hull)
ggplot(data=test) +
geom_jitter(aes(x=colorx, y=colorz, fill=EvidencePostDepBurning),
width=.1, height=.1,
alpha=.8, shape=21,size=2,
color="black") +
geom_polygon(data = hulls, aes(x=colorx, y=colorz, fill=EvidencePostDepBurning), alpha = 0.5)
install.packages("ggalt")
library(ggalt)
ggplot(data=test) +
geom_jitter(aes(x=colorx, y=colorz, fill=EvidencePostDepBurning),
width=.1, height=.1,
alpha=.8, shape=21,size=2,
color="black") +
geom_bag(prop=.95)
library(ggalt)
source("Convex hull function.R")
ggplot(data=test) +
geom_jitter(aes(x=colorx, y=colorz, fill=EvidencePostDepBurning),
width=.1, height=.1,
alpha=.8, shape=21,size=2,
color="black") +
geom_bag(prop=.95)
ggplot(data=test, aes(x=colorx, y=colorz, fill=EvidencePostDepBurning)) +
geom_jitter(width=.1, height=.1,
alpha=.8, shape=21,size=2,
color="black") +
geom_bag(prop=.95)
ggplot(data=test, aes(x=colorx, y=colory, fill=EvidencePostDepBurning)) +
geom_jitter(width=.1, height=.1,
alpha=.8, shape=21,size=2,
color="black") +
geom_bag(prop=.95)
ggplot(data=test, aes(x=colorz, y=colory, fill=EvidencePostDepBurning)) +
geom_jitter(width=.1, height=.1,
alpha=.8, shape=21,size=2,
color="black") +
geom_bag(prop=.95)
ggplot(data=test, aes(x=colorx, y=colorz, fill=EvidencePostDepBurning)) +
geom_jitter(width=.1, height=.1,
alpha=.8, shape=21,size=2,
color="black") +
geom_bag(prop=.95)
test$LithicArtifactClass
ggplot(data=test, aes(x=colorx, y=colorz, fill=LithicArtifactClass)) +
geom_jitter(width=.1, height=.1,
alpha=.8, shape=21,size=2,
color="black") +
geom_bag(prop=.95)
ggplot(data=test, aes(x=colorx, y=colorz, fill=SITE)) +
geom_jitter(width=.1, height=.1,
alpha=.8, shape=21,size=2,
color="black") +
geom_bag(prop=.95)
ggplot(data=test, aes(x=colorx, y=colorz, fill=SITE)) +
geom_jitter(width=.1, height=.1,
alpha=.8, shape=21,size=2,
color="black") +
geom_bag(prop=.9)
library(here)
library(readxl)
library(ggplot2)
library(vegan)
setwd(here::here())
d<-read_xlsx("LBJ attribute data.xlsx", sheet=1)
source("Clean Data.R")
data<-clean.data(d)
library(here)
library(readxl)
library(ggplot2)
library(vegan)
setwd(here::here())
d<-read_xlsx("LBJ attribute data.xlsx", sheet=1)
source("Clean Data.R")
source("Munsell color quantifier.R")
data<-clean.data(d)
data<-munsell.converter(d)
data
data<-munsell.converter(d$Munsell)
library(here)
library(readxl)
library(ggplot2)
library(vegan)
setwd(here::here())
d<-read_xlsx("LBJ attribute data.xlsx", sheet=1)
source("Clean Data.R")
source("Munsell color quantifier.R")
d<-clean.data(d)
for(i in 1:length(d$Munsell)){
color<-d$Munsell[i]
hue<-str_replace(color, "(.)[/](.)", "")
chroma<-as.numeric(str_match(color, "(.)[/](.)"))[2]
value<-as.numeric(str_match(color, "(.)[/](.)"))[3]
output<-munsell.converter(hue, value,chroma)
d$colorx[i]<-as.numeric(output[1])
d$colory[i]<-as.numeric(output[2])
d$colorz[i]<-as.numeric(output[3])
}
library(here)
library(readxl)
library(ggplot2)
library(vegan)
library(stringr)
library(here)
library(readxl)
library(ggplot2)
library(vegan)
library(stringr)
setwd(here::here())
d<-read_xlsx("LBJ attribute data.xlsx", sheet=1)
source("Clean Data.R")
source("Munsell color quantifier.R")
d<-clean.data(d)
for(i in 1:length(d$Munsell)){
color<-d$Munsell[i]
hue<-str_replace(color, "(.)[/](.)", "")
chroma<-as.numeric(str_match(color, "(.)[/](.)"))[2]
value<-as.numeric(str_match(color, "(.)[/](.)"))[3]
output<-munsell.converter(hue, value,chroma)
d$colorx[i]<-as.numeric(output[1])
d$colory[i]<-as.numeric(output[2])
d$colorz[i]<-as.numeric(output[3])
}
GL317<-d[which(d$SITE=="41GL317"),]
ggplot(data=GL317, aes(x=Mass,y=lvl)) +
stat_summary(fun = sum, na.rm = TRUE, color = 'black', geom ='line', size=1.2) +
stat_summary(fun = sum, na.rm = TRUE, color = 'black', geom ='point', size=2) +
scale_y_discrete(limits = rev(levels(data$lvl)))+ facet_wrap(~context)
library(here)
library(readxl)
library(ggplot2)
library(vegan)
library(stringr)
setwd(here::here())
d<-read_xlsx("LBJ attribute data.xlsx", sheet=1)
source("Clean Data.R")
source("Munsell color quantifier.R")
d<-clean.data(d)
for(i in 1:length(d$Munsell)){
color<-d$Munsell[i]
hue<-str_replace(color, "(.)[/](.)", "")
chroma<-as.numeric(str_match(color, "(.)[/](.)"))[2]
value<-as.numeric(str_match(color, "(.)[/](.)"))[3]
output<-munsell.converter(hue, value,chroma)
d$colorx[i]<-as.numeric(output[1])
d$colory[i]<-as.numeric(output[2])
d$colorz[i]<-as.numeric(output[3])
}
unique(d$Provenience)
GL317<-d[which(d$SITE=="41GL317"),]
GL317east<-GL317[which(d$Provenience %in% c(1,2,3,4,5)),]
GL317east
GL317east<-GL317[which(d$Provenience %in% c(1,2,3,4,5)),]
library(here)
library(readxl)
library(stringr)
library(dplyr)
library(plyr)
library(plotly)
library(vegan)
library(ggalt)
source("Munsell color quantifier.R")
source("Convex hull function.R")
source("Clean Data.R")
#Read in data
d<-read_xlsx("LBJ attribute data.xlsx")
d<-clean.data(d)
d2<-read_xlsx("raw material survey data.xlsx", sheet=4)
d2$Locality<-append(d2$Locality,d$SITE)
#Read in data
d<-read_xlsx("LBJ attribute data.xlsx")
d<-clean.data(d)
d2<-read_xlsx("raw material survey data.xlsx", sheet=4)
library(here)
library(readxl)
library(stringr)
library(dplyr)
library(plyr)
library(plotly)
library(vegan)
library(ggalt)
#Test the function.
#Load function.
source("Munsell color quantifier.R")
source("Convex hull function.R")
source("Clean Data.R")
#Read in data
d<-read_xlsx("LBJ attribute data.xlsx")
d<-clean.data(d)
d2<-read_xlsx("raw material survey data.xlsx", sheet=4)
names(d2)[1]<-"SITE"
d2$Locality<-append(d2$Locality,d$SITE)
library(here)
library(readxl)
library(stringr)
library(dplyr)
library(plyr)
library(plotly)
library(vegan)
library(ggalt)
#Test the function.
#Load function.
source("Munsell color quantifier.R")
source("Convex hull function.R")
source("Clean Data.R")
#Read in data
d<-read_xlsx("LBJ attribute data.xlsx")
d<-clean.data(d)
d2<-read_xlsx("raw material survey data.xlsx", sheet=4)
names(d2)[1]<-"SITE"
d2$Locality<-append(d2$Locality,d$SITE)
library(here)
library(readxl)
library(stringr)
library(dplyr)
library(plyr)
library(plotly)
library(vegan)
library(ggalt)
#Test the function.
#Load function.
source("Munsell color quantifier.R")
source("Convex hull function.R")
source("Clean Data.R")
#Read in data
d<-read_xlsx("LBJ attribute data.xlsx")
d<-clean.data(d)
d2<-read_xlsx("raw material survey data.xlsx", sheet=4)
names(d2)[1]<-"SITE"
temp<-d[grep("SITE|Munsell", names(d))]
temp2<-d2[grep("SITE|Munsell", names(d2))]
d2<-rbind(d, d2)
library(here)
library(readxl)
library(stringr)
library(dplyr)
library(plyr)
library(plotly)
library(vegan)
library(ggalt)
#Test the function.
#Load function.
source("Munsell color quantifier.R")
source("Convex hull function.R")
source("Clean Data.R")
#Read in data
d<-read_xlsx("LBJ attribute data.xlsx")
d<-clean.data(d)
d2<-read_xlsx("raw material survey data.xlsx", sheet=4)
names(d2)[1]<-"SITE"
d2
library(here)
library(readxl)
library(stringr)
library(dplyr)
library(plyr)
library(plotly)
library(vegan)
library(ggalt)
#Test the function.
#Load function.
source("Munsell color quantifier.R")
source("Convex hull function.R")
source("Clean Data.R")
#Read in data
d<-read_xlsx("LBJ attribute data.xlsx")
d<-clean.data(d)
d2<-read_xlsx("raw material survey data.xlsx", sheet=4)
names(d2)[1]<-"SITE"
temp<-d[grep("SITE|Munsell", names(d))]
temp2<-d2[grep("SITE|Munsell", names(d2))]
d2<-rbind(temp, temp2)
d2
for(i in 1:length(d2$Munsell)){
color<-d2$Munsell[i]
hue<-str_replace(color, "(.)[/](.)", "")
chroma<-as.numeric(str_match(color, "(.)[/](.)"))[2]
value<-as.numeric(str_match(color, "(.)[/](.)"))[3]
output<-munsell.converter(hue, value,chroma)
d2$colorx[i]<-as.numeric(output[1])
d2$colory[i]<-as.numeric(output[2])
d2$colorz[i]<-as.numeric(output[3])
}
d2
jitterfy<-function(x){
return(rnorm(1,x, .1))
}
for(i in 1:length(d$colorx)){d$jitterx[i]<-jitterfy(d$colorx[i])}
for(i in 1:length(d$colory)){d$jittery[i]<-jitterfy(d$colory[i])}
for(i in 1:length(d$colorz)){d$jitterz[i]<-jitterfy(d$colorz[i])}
## Apply function to every artifact in the dataset.
for(i in 1:length(d$Munsell)){
color<-d$Munsell[i]
hue<-str_replace(color, "(.)[/](.)", "")
chroma<-as.numeric(str_match(color, "(.)[/](.)"))[2]
value<-as.numeric(str_match(color, "(.)[/](.)"))[3]
output<-munsell.converter(hue, value,chroma)
d$colorx[i]<-as.numeric(output[1])
d$colory[i]<-as.numeric(output[2])
d$colorz[i]<-as.numeric(output[3])
}
jitterfy<-function(x){
return(rnorm(1,x, .1))
}
for(i in 1:length(d$colorx)){d$jitterx[i]<-jitterfy(d$colorx[i])}
for(i in 1:length(d$colory)){d$jittery[i]<-jitterfy(d$colory[i])}
for(i in 1:length(d$colorz)){d$jitterz[i]<-jitterfy(d$colorz[i])}
for(i in 1:length(d2$colorx)){d2$jitterx[i]<-jitterfy(d2$colorx[i])}
for(i in 1:length(d2$colory)){d2$jittery[i]<-jitterfy(d2$colory[i])}
for(i in 1:length(d2$colorz)){d2$jitterz[i]<-jitterfy(d2$colorz[i])}
p <- plot_ly(data=d2) %>%
# the scatter plot of the data points
add_trace(x=d$jitterx, y=d$jittery, z=d$jitterz,
color=d$LithicArtifactClass,
type="scatter3d", mode="markers",
colors = "Set1",
hoverinfo = "text",
hovertext=paste(d$Munsell, d$LithicArtifactClass),
jitter = 0.7,
marker = list(opacity = .5, size=4))
p
p <- plot_ly(data=d2) %>%
# the scatter plot of the data points
add_trace(x=d$jitterx, y=d$jittery, z=d$jitterz,
color=d$SITE,
type="scatter3d", mode="markers",
colors = "Set1",
hoverinfo = "text",
hovertext=paste(d$Munsell, d$LithicArtifactClass),
jitter = 0.7,
marker = list(opacity = .5, size=4))
p
library(here)
library(readxl)
library(stringr)
library(dplyr)
library(plyr)
library(plotly)
library(vegan)
library(ggalt)
#Test the function.
#Load function.
source("Munsell color quantifier.R")
source("Convex hull function.R")
source("Clean Data.R")
#Read in data
d<-read_xlsx("LBJ attribute data.xlsx")
d<-clean.data(d)
d2<-read_xlsx("raw material survey data.xlsx", sheet=4)
names(d2)[1]<-"SITE"
temp<-d[grep("SITE|Munsell", names(d))]
temp2<-d2[grep("SITE|Munsell", names(d2))]
d2<-rbind(temp, temp2)
for(i in 1:length(d2$Munsell)){
color<-d2$Munsell[i]
hue<-str_replace(color, "(.)[/](.)", "")
chroma<-as.numeric(str_match(color, "(.)[/](.)"))[2]
value<-as.numeric(str_match(color, "(.)[/](.)"))[3]
output<-munsell.converter(hue, value,chroma)
d2$colorx[i]<-as.numeric(output[1])
d2$colory[i]<-as.numeric(output[2])
d2$colorz[i]<-as.numeric(output[3])
}
# Test the function
color<-paste("7.5yr7/2")
hue<-str_replace(color, "(.)[/](.)", "")
chroma<-as.numeric(str_match(color, "(.)[/](.)"))[2]
value<-as.numeric(str_match(color, "(.)[/](.)"))[3]
munsell.converter(hue,value, chroma)
## Apply function to every artifact in the dataset.
for(i in 1:length(d$Munsell)){
color<-d$Munsell[i]
hue<-str_replace(color, "(.)[/](.)", "")
chroma<-as.numeric(str_match(color, "(.)[/](.)"))[2]
value<-as.numeric(str_match(color, "(.)[/](.)"))[3]
output<-munsell.converter(hue, value,chroma)
d$colorx[i]<-as.numeric(output[1])
d$colory[i]<-as.numeric(output[2])
d$colorz[i]<-as.numeric(output[3])
}
jitterfy<-function(x){
return(rnorm(1,x, .1))
}
for(i in 1:length(d$colorx)){d$jitterx[i]<-jitterfy(d$colorx[i])}
for(i in 1:length(d$colory)){d$jittery[i]<-jitterfy(d$colory[i])}
for(i in 1:length(d$colorz)){d$jitterz[i]<-jitterfy(d$colorz[i])}
for(i in 1:length(d2$colorx)){d2$jitterx[i]<-jitterfy(d2$colorx[i])}
for(i in 1:length(d2$colory)){d2$jittery[i]<-jitterfy(d2$colory[i])}
for(i in 1:length(d2$colorz)){d2$jitterz[i]<-jitterfy(d2$colorz[i])}
p <- plot_ly(data=d2) %>%
# the scatter plot of the data points
add_trace(x=d$jitterx, y=d$jittery, z=d$jitterz,
color=d$SITE,
type="scatter3d", mode="markers",
colors = "Set1",
hoverinfo = "text",
hovertext=paste(d$Munsell, d$LithicArtifactClass),
jitter = 0.7,
marker = list(opacity = .5, size=4))
p
d2
unique(d2$SITE)
p <- plot_ly(data=d2) %>%
# the scatter plot of the data points
add_trace(x=jitterx, y=jittery, z=jitterz,
color=SITE,
type="scatter3d", mode="markers",
colors = "Set1",
hoverinfo = "text",
hovertext=paste(Munsell, LithicArtifactClass),
jitter = 0.7,
marker = list(opacity = .5, size=4))
p
p <- plot_ly(data=d2) %>%
add_trace(x=jitterx, y=jittery, z=jitterz,
color=SITE,
type="scatter3d", mode="markers",
colors = "Set1",
hoverinfo = "text",
hovertext=paste(Munsell, LithicArtifactClass),
jitter = 0.7,
marker = list(opacity = .5, size=4))
for(i in 1:length(d2$colorx)){d2$jitterx[i]<-jitterfy(d2$colorx[i])}
for(i in 1:length(d2$colory)){d2$jittery[i]<-jitterfy(d2$colory[i])}
for(i in 1:length(d2$colorz)){d2$jitterz[i]<-jitterfy(d2$colorz[i])}
d2
unique(d2$jitterx)
p <- plot_ly(data=d2) %>%
add_trace(x=jitterx, y=jittery, z=jitterz,
color=SITE,
type="scatter3d", mode="markers",
colors = "Set1",
hoverinfo = "text",
jitter = 0.7,
marker = list(opacity = .5, size=4))
p
unique(d2$SITE)
find_hull <- function(x) x[chull(x$colorx, x$colorz), ]
ggplot(data=test, aes(x=colorx, y=colorz, fill=SITE)) +
geom_jitter(width=.1, height=.1,
alpha=.8, shape=21,size=2,
color="black") +
geom_bag(prop=.9)
ggplot(data=d2t, aes(x=colorx, y=colorz, fill=SITE)) +
geom_jitter(width=.1, height=.1,
alpha=.8, shape=21,size=2,
color="black") +
geom_bag(prop=.9)
ggplot(data=d2, aes(x=colorx, y=colorz, fill=SITE)) +
geom_jitter(width=.1, height=.1,
alpha=.8, shape=21,size=2,
color="black") +
geom_bag(prop=.9)
ggplot(data=d2, aes(x=colorx, y=colorz, fill=SITE)) +
geom_jitter(width=.1, height=.1,
alpha=.8, shape=21,size=2,
color="black") +
geom_bag(prop=.9)
ggplot(data=d2, aes(x=colorx, y=colorz, fill=SITE)) +
geom_jitter(width=.1, height=.1,
alpha=.8, shape=21,size=2,
color="black") +
geom_bag(prop=.9)
